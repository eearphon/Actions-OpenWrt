#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder custom

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repo:
        description: 'repo_url;branch (https://github.com/Lienol/openwrt;22.03)'
        required: true
        default: 'https://github.com/coolsnowwolf/lede'
      diy-partx_suffix:
        description: 'diy-partx_SUFFIX.sh (Lienol_23.05)'
        required: false
        default: ''
      kernel_ver:
        description: 'kernel version'
        required: false
        default: ''
      checkout:
        description: 'checkout'
        required: false
        default: ''
      lanip:
        description: 'lan ip address'
        required: true
        default: '192.168.2.1'

env:
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1_${{ github.event.inputs.diy-partx_suffix }}.sh
  DIY_P2_SH: diy-part2_${{ github.event.inputs.diy-partx_suffix }}.sh
  LAN_IP: ${{ github.event.inputs.lanip }}
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
 
jobs:
  build:
    runs-on: ubuntu-22.04
    permissions: 
      contents: write
      actions: write

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        #sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        #sudo docker image prune --all --force
        #sudo -E apt-get -qq update
        #sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        #sudo -E apt-get -qq autoremove --purge
        #sudo -E apt-get -qq clean
        #sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        eval $(echo '${{ github.event.inputs.repo }}' | awk -F";" '{print "var1="$1";var2="$2}')
        echo "REPO_URL=$var1" >> $GITHUB_ENV
        echo "REPO_BRANCH=$var2" >> $GITHUB_ENV
        var3=$(echo '${{ github.event.inputs.repo }}' | awk -F"/" '{print $4'})
        [ -n "$var2" ] && var2="_$var2"
        [ -n "${{ github.event.inputs.diy-partx_suffix }}" ] || echo "DIY_P1_SH=diy-part1_${var3}${var2}.sh" >> $GITHUB_ENV
        [ -n "${{ github.event.inputs.diy-partx_suffix }}" ] || echo "DIY_P2_SH=diy-part2_${var3}${var2}.sh" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        [ -n "$REPO_BRANCH" ] && branchstr="-b $REPO_BRANCH" || branchstr=''
        #exit 1
        #git clone $REPO_URL $branchstr --single-branch openwrt
        mkdir openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        [ -e $DIY_P1_SH ] && chmod +x $DIY_P1_SH
        [ -e $DIY_P1_SH ] && cd openwrt && pwd && $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt

    - name: Install feeds
      run: cd openwrt

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        [ -e $DIY_P2_SH ] && chmod +x $DIY_P2_SH
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$DIY_P2_SH ] && $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "VERSION_KERNEL=$(./scripts/getver.sh)_$(grep 'KERNEL_PATCHVER:=' target/linux/x86/Makefile | awk -F"=" '{print $2}')" >> $GITHUB_ENV
        sed -i -E "/lan\) ipad=/s/([0-9]{1,3}\.){3}[0-9]{1,3}/${{ env.LAN_IP }}/" package/base-files/files/bin/config_generate

    - name: Download package
      id: package
      run: |
        exit 1
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        #mkdir -p bin/targets/x86/64 && ls -l >> bin/targets/x86/64/openwrt_files.txt && env >> bin/targets/x86/64/env.txt
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        [ -e openwrt-x86-64-generic-squashfs-combined-efi.vmdk ] && mv openwrt-x86-64-generic-squashfs-combined-efi.vmdk openwrt-x86-64-generic-squashfs-combined-efi_${{ env.VERSION_KERNEL }}_${{ github.event.inputs.lanip }}.vmdk
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")_$VERSION_KERNEL" >> $GITHUB_OUTPUT
        date >> release.txt
        echo "REPO_URL: ${{ env.REPO_URL }}" >> release.txt
        echo "REPO_BRANCH: ${{ env.REPO_BRANCH }}" >> release.txt
        echo "DIY_P1_SH: ${{ env.DIY_P1_SH }}" >> release.txt
        echo "DIY_P2_SH: ${{ env.DIY_P2_SH }}" >> release.txt
        echo "VERSION_KERNEL: ${{ env.VERSION_KERNEL }}" >> release.txt
        echo "LAN_IP: ${{ env.LAN_IP }}" >> release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "ðŸ”— [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        pwd && ls -al

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 20
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
