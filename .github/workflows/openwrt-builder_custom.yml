#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder custom

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repourl:
        description: 'repo_url;branch (https://github.com/Lienol/openwrt;22.03)'
        required: true
        default: 'https://github.com/coolsnowwolf/lede'
      notes:
        description: 'Notes'
        required: false
        default: ''
      use_cache:
        description: 'use cache'
        default: "cache_ccache"
        type: choice
        options:
          - cache_ccache
          - cache
          - disable
      diy-partx_suffix:
        description: 'diy-partx_SUFFIX.sh (Lienol_23.05)'
        required: false
        default: ''
      append2feeds_conf:
        description: 'lines append to feeds.conf.default(separated by commas)'
        required: false
        default: ''
      append2config:
        description: 'lines append to .config(separated by commas)'
        required: false
        default: ''
      golangnewver:
        description: 'use golang 22.x'
        type: boolean
        required: false
        default: true
      kernel_ver:
        description: 'kernel version'
        required: false
        default: ''
      checkout:
        description: 'checkout'
        required: false
        default: ''
      lanip:
        description: 'lan ip address'
        required: true
        default: '192.168.2.1'

env:
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1_${{ github.event.inputs.diy-partx_suffix }}.sh
  DIY_P2_SH: diy-part2_${{ github.event.inputs.diy-partx_suffix }}.sh
  LAN_IP: ${{ github.event.inputs.lanip }}
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
 
jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    permissions: 
      contents: write
      actions: write

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        eval $(echo '${{ github.event.inputs.repourl }}' | awk -F";" '{print "var1="$1";repobranch="$2}')
        echo "REPO_URL=$var1" >> $GITHUB_ENV
        echo "REPO_BRANCH=$repobranch" >> $GITHUB_ENV
        repoowner=$(echo '${{ github.event.inputs.repourl }}' | awk -F"/" '{print $4}')
        [ -n "$repobranch" ] && repobranch="_$repobranch"
        if [ -n "${{ github.event.inputs.diy-partx_suffix }}" ]; then
          if [ ! -e $DIY_P1_SH ]; then
            echo "DIY_P1_SH=diy-part1_${repoowner}.sh" >> $GITHUB_ENV
          fi
          if [ ! -e $DIY_P2_SH ]; then
            echo "DIY_P2_SH=diy-part2_${repoowner}.sh" >> $GITHUB_ENV
          fi
        else
          echo "DIY_P1_SH=diy-part1_${repoowner}${repobranch}.sh" >> $GITHUB_ENV
          echo "DIY_P2_SH=diy-part2_${repoowner}${repobranch}.sh" >> $GITHUB_ENV
        fi
        echo "START_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        [ -n "$REPO_BRANCH" ] && branchstr="-b $REPO_BRANCH" || branchstr=''
        #exit 1
        git clone $REPO_URL $branchstr --single-branch openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      env:
        A2FEEDS: ${{ github.event.inputs.append2feeds_conf }}
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        cd openwrt
        [ -n "${{ github.event.inputs.checkout }}" ] && git reset --hard ${{ github.event.inputs.checkout }}
        [ -e $GITHUB_WORKSPACE/$DIY_P1_SH ] && sh $GITHUB_WORKSPACE/$DIY_P1_SH || echo "DIY_P1_SH=" >> $GITHUB_ENV
        if [[ $A2FEEDS == new* ]]; then
          rm -rf feeds.conf.default
          git checkout feeds.conf.default
          echo "Use default feeds.conf.default"
        elif [ -n "$A2FEEDS" ]; then
          IFS=',' read -ra array <<< "$A2FEEDS"
          for aline in "${array[@]}"; do
            trimmed_aline="$(echo "${aline}" | awk '{$1=$1}1')"
            part2=$(echo $trimmed_aline | awk '{print " " $2 " "}')
            first_char="${trimmed_aline:0:1}"
            if [ "$first_char" = "1" ]; then
              delfirst="${trimmed_aline:1}"
              echo "$delfirst" >> tmpfile1
              sed -i "/$part2/d" feeds.conf.default
            else
              if grep -q "^[^#]*${part2}" feeds.conf.default; then
                sed -i "/^[^#]*${part2}/c\\${trimmed_aline}" feeds.conf.default
              else
                echo "$trimmed_aline" >> feeds.conf.default
              fi
            fi
          done
          [ -e tmpfile1 ] && mv feeds.conf.default tmpfile2 && cat tmpfile1 tmpfile2 > feeds.conf.default && rm -rf tmpfile1 tmpfile2
        fi
        cat feeds.conf.default
        pwd && echo $GITHUB_WORKSPACE/$DIY_P1_SH && ls -l

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        [ "${{ github.event.inputs.golangnewver }}" == "true" ] && rm -rf feeds/packages/lang/golang && git clone https://github.com/sbwml/packages_lang_golang -b 22.x feeds/packages/lang/golang
        [ -d feeds/packages/lang/rust ] || tar zxvf $GITHUB_WORKSPACE/extra/rust.tgz -C feeds/packages/
        [ -e feeds/packages_up/net/miniupnpc/package/mbedtls_2.28.0.tgz ] && rm -rf package/libs/mbedtls && tar zxvf feeds/packages_up/net/miniupnpc/package/mbedtls_2.28.0.tgz
        [ -e feeds/packages_up/net/miniupnpc/package/libiconv-full_1.11.1-3.tgz ] && rm -rf package/libs/libiconv-full && tar zxvf feeds/packages_up/net/miniupnpc/package/libiconv-full_1.11.1-3.tgz
        [ "${{ github.event.inputs.repourl }}" == 'https://github.com/Lienol/openwrt;19.07' ] && (cd include; patch < $GITHUB_WORKSPACE/extra/lienol_openwrt_19.07.patch; cd ..)
        grep ^GO_VERSION_MAJOR_MINOR feeds/packages/lang/golang/golang/Makefile || echo 'golang version unknow'
        ./scripts/feeds update -i

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt
        [ -e $GITHUB_WORKSPACE/$DIY_P2_SH ] && sh $GITHUB_WORKSPACE/$DIY_P2_SH || echo "DIY_P2_SH=" >> $GITHUB_ENV
        [ -n "${{ github.event.inputs.append2config }}" ] && echo "${{ github.event.inputs.append2config }}" | awk -F"," '{ for(i=1; i<=NF; i++) print $i }' | awk '{$1=$1}1' >> .config
        grep -q ^new .config && sed -i '1,/^new/d' .config
        cat .config
        sed -i -E "/lan\) ipad=/s/([0-9]{1,3}\.){3}[0-9]{1,3}/${{ env.LAN_IP }}/" package/base-files/files/bin/config_generate
        make defconfig
        echo "ARCH=$(grep '^CONFIG_TARGET_ARCH_PACKAGES=' .config | sed -r 's/CONFIG_TARGET_ARCH_PACKAGES="(.*)"/\1/')" >> $GITHUB_ENV
        if [ -n "${{ github.event.inputs.kernel_ver }}" ]; then
          eval $(grep '^CONFIG_TARGET.*_DEVICE_.*=y' .config | awk -F"_" '{print "dir1="$3";dir2="$4}')
          if [ -e target/linux/$dir1/$dir2/config-${{ github.event.inputs.kernel_ver }} ]; then
            sed -i '/^KERNEL_PATCHVER:=/c\KERNEL_PATCHVER:=${{ github.event.inputs.kernel_ver }}' target/linux/$dir1/Makefile
          fi
        fi

    - name: Cache
      uses: stupidloud/cachewrtbuild@main
      if: ${{ github.event.inputs.use_cache != 'disable' }}
      with:
        ccache: ${{ github.event.inputs.use_cache == 'cache_ccache' }}
        mixkey: ${{ env.ARCH }}
        prefix: ${{ github.workspace }}/openwrt

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        #mkdir -p bin/targets/x86/64 && ls -l >> bin/targets/x86/64/openwrt_files.txt && env >> bin/targets/x86/64/env.txt
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date -d @${{ env.START_TIMESTAMP }} +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "VERSION_KERNEL=$(./scripts/getver.sh)_$(awk -F'[_=]' '/^CONFIG_LINUX_/ && $5=="y" {printf "%s.%s", $3, $4}' .config)" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt
        mkdir -p assets
        cp .config assets/config.full
        cp bin/targets/*/*/* assets/ || :
        rm bin/targets/*/*/* || :
        tar zcvf assets/packages.tgz bin/*
        cd assets/
        [ -e openwrt-x86-64-generic-squashfs-combined-efi.vmdk ] && mv openwrt-x86-64-generic-squashfs-combined-efi.vmdk openwrt-x86-64-generic-squashfs-combined-efi_${{ env.VERSION_KERNEL }}_${{ github.event.inputs.lanip }}.vmdk
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date -d @${{ env.START_TIMESTAMP }} +"%Y.%m.%d-%H%M")_$VERSION_KERNEL" >> $GITHUB_OUTPUT
        echo "## Summary" >> release.txt
        echo "- **Build time:** $(date -d @${{ env.START_TIMESTAMP }} +"%Y.%m.%d %H:%M")" >> release.txt
        echo "- **CONFIG_TARGET:** $(grep '^CONFIG_TARGET_.*=y' openwrt/.config | awk 'NR==3' | sed -r 's/CONFIG_TARGET_(.*)=y/\1/')" >> release.txt
        echo "- **REPO_URL:** ${{ env.REPO_URL }}" >> release.txt
        echo "- **REPO_BRANCH:** ${{ env.REPO_BRANCH }}" >> release.txt
        echo "- **DIY_P1_SH:** ${{ env.DIY_P1_SH }}" >> release.txt
        echo "- **DIY_P2_SH:** ${{ env.DIY_P2_SH }}" >> release.txt
        echo "- **VERSION_KERNEL:** ${{ env.VERSION_KERNEL }}" >> release.txt
        echo "- **LAN_IP:** ${{ env.LAN_IP }}" >> release.txt
        echo "- **Notes:** ${{ github.event.inputs.notes }}" >> release.txt
        echo "## Luci app" >> release.txt
        grep ^luci-app- ${{ env.FIRMWARE }}/openwrt-*.manifest | awk 'BEGIN { print "**Name**|**Version**\n-|-" } { split($0, arr, " - "); print arr[1] "|" arr[2] }' >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        pwd && ls -al

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 50
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
